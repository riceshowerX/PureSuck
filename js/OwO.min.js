(() => {
    class OwO {
        constructor(options) {
            const defaultOptions = {
                logo: 'OwO表情',
                container: $('.OwO')[0],  // 使用jQuery选择器
                target: $('textarea')[0],  // 使用jQuery选择器
                position: 'down',
                width: '100%',
                maxHeight: '250px',
                api: '/usr/themes/PureSuck/js/OwO.json',
            };

            this.options = { ...defaultOptions, ...options };
            this.container = this.options.container;
            this.target = this.options.target;

            // 如果位置是 "up"，则调整样式
            if (this.options.position === 'up') {
                $(this.container).addClass('OwO-up');
            }

            this.fetchEmojiData(this.options.api)
                .then((data) => {
                    this.odata = data;
                    this.init();
                })
                .catch((error) => {
                    console.error('加载表情数据失败：', error);
                });
        }

        async fetchEmojiData(api) {
            const cachedData = localStorage.getItem('owoEmojiData');
            if (cachedData) return JSON.parse(cachedData);

            try {
                const response = await fetch(api);
                if (!response.ok) throw new Error(`HTTP 错误！状态：${response.status}`);
                const data = await response.json();
                localStorage.setItem('owoEmojiData', JSON.stringify(data));
                return data;
            } catch (err) {
                throw new Error(err);
            }
        }

        init() {
            this.area = this.options.target;
            this.packages = Object.keys(this.odata);
            this.buildUI();
            this.bindEvents();
            this.setInitialTab();
        }

        buildUI() {
            let html = `
                <div class="OwO-logo"><span>${this.options.logo}</span></div>
                <div class="OwO-body" style="width: ${this.options.width}">`;

            // 生成表情面板内容
            this.packages.forEach((pkg) => {
                const packageData = this.odata[pkg];
                const maxHeight = `${parseInt(this.options.maxHeight) - 53}px`;
                const packageWidth = packageData.width || '';

                html += `<ul class="OwO-items OwO-items-${packageData.type}" style="max-height: ${maxHeight};">`;

                packageData.container.forEach((item) => {
                    const { text, input, icon } = item;
                    const isImage = packageData.type === 'image';
                    const imgWidth = packageWidth ? ` style="width: ${packageWidth};"` : '';
                    const inputValue = input || icon;
                    html += `
                    <li class="OwO-item" title="${text}" data-input="${inputValue}">
                        ${isImage ? `<img src="${icon}" alt="${text}" loading="lazy"${imgWidth}>` : icon}
                    </li>`;
                });

                html += `</ul>`;
            });

            html += `
                <div class="OwO-bar">
                    <ul class="OwO-packages">`;

            // 生成表情包标签
            this.packages.forEach((pkg) => {
                html += `<li><span>${pkg}</span></li>`;
            });

            html += `
                    </ul>
                    <div class="OwO-indicator"></div>
                </div>
            </div>`;

            $(this.container).html(html);
        }

        bindEvents() {
            // logo 点击事件：切换表情面板
            $(this.container).find('.OwO-logo').on('click', () => this.toggle());

            // 表情项点击事件：将表情插入文本框
            $(this.container).find('.OwO-body').on('click', '.OwO-item', (e) => {
                const target = $(e.target);
                const cursorPos = this.area.selectionEnd;
                const textToInsert = target.data('input');
                this.area.value = this.area.value.slice(0, cursorPos) + textToInsert + this.area.value.slice(cursorPos);
                this.area.focus();
                this.toggle();
            });

            // 切换表情包
            this.packagesEle = $(this.container).find('.OwO-packages');
            this.packagesEle.on('click', 'li', (e) => {
                const index = $(e.target).closest('li').index();
                this.tab(index);
            });
        }

        toggle() {
            $(this.container).toggleClass('OwO-open');
        }

        tab(index) {
            // 切换表情包的显示
            $(this.container).find('.OwO-items-show').removeClass('OwO-items-show');
            $(this.container).find('.OwO-items').eq(index).addClass('OwO-items-show');

            // 切换选中的表情包标签
            $(this.container).find('.OwO-package-active').removeClass('OwO-package-active');
            this.packagesEle.children().eq(index).addClass('OwO-package-active');

            // 更新指示器位置
            const activeLink = this.packagesEle.children().eq(index);
            const indicator = $(this.container).find('.OwO-indicator');
            indicator.css({
                width: `${activeLink.outerWidth()}px`,
                left: `${activeLink.position().left}px`
            });
        }

        setInitialTab() {
            // 默认选中第一个表情包
            this.tab(0);
        }
    }

    // 判断模块化方式
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = OwO;
    } else {
        window.OwO = OwO;
    }

})();

// 初始化评论区的 OwO 表情选择器
function initializeCommentsOwO() {
    const container = $('.OwO')[0];
    const target = $('.OwO-textarea')[0];
    if (container && target) {
        const OwO_demo = new OwO({
            logo: 'OωO表情',
            container,
            target,
            api: '/usr/themes/PureSuck/js/OwO.json',
            position: 'up',
            width: '100%',
            maxHeight: '260px'
        });

        const owoButton = $('#owo-button');
        if (owoButton.length) {
            owoButton.on('click', () => OwO_demo.toggle());
        }
    }
}

initializeCommentsOwO();
